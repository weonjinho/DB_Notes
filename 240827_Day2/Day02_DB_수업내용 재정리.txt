Day02_DB_수업내용 재정리

개념 & 이론
문제 유형
코드
경험

문제 분석하는 방식 :
1. 테이블을 봤을때 어떤 문제가 있는지를 판단하고, 설명할때 CRUD순으로 생각하고 설명할것.

기능을 정확하게 구현할 수 있는가? ( 현업 )

1. 정형 데이터랑 비정형데이터의 차이?
	형태가 정해져 있느냐의 차이, 정형 태이터의 형태중 하나가 테이블이다.

기본키 : 튜플을 유일하게 식별하며, 기본키로 index( 색인 )를 형성하여 저장한다. null은 불가하다.

===================================================================
개념 & 이론 정리
1. CRUD ( ***** )
	1. Create : 로우를 insert 하는 작업.
	2. Read : 로우를 select 하는 작업.
	3. Update : 로우를 update 하는 작업.
	4. Delete : 로우를 delete 하는 작업.

2. view ( 뷰 ) : 화면에 보여주는걸 뷰라고한다.

3. 정형/비정형 데이터의 차이 : 형태가 있는냐.
  	1. 정형 데이터는 형태가 정해져있고, 형태중 하나가 테이블이다.
	2. 정형 데이터의 사용되는 프로그림으로는 Oracle, MySQL, MariaDB,MSSQL 이 있다.
	
4. 행 : row ---> CRUD랑 관련있고
   열 : Column ---> 속성 & 제약조건하고 관련있다.

5. key : 컬럼의 부여하는 기능.

6. 기본키 : ( ***** )
	1. 특징 : 튜플( row )을 유일하게 식별, 기본키로 index ( 색인 )를 형성하여 저장한다, null 불가한다.
	2. 기본키는 테이블당 1개만 설정한다.
	3. 기본키는 not null 제약조건을 포함하고 있다.
	4. index( 색인 ) 은 검색속도를 향상시킨다. ( 빨라진다. )
	5. 기본키는 인덱스도 형성하고 유일하게 식별하는 기능도 같고 있다.
	6. id로 검색하면 속도가 빨라질수 있다는 특징, 다만 이름/주소로 검색하면 무용지물.
	7. 일반적으로 테이블당 index 하나만 만든다, index가 많다고 좋은것은 아니다.
	
7. 이상현상 ( ***** )
테이블을 설계할때 이상현상이 있는지를 고려해야한다, 이때 유일성과 테이터의 중복 최소화를 생각하면 좋다.
	1. 유일성  문제 발생시 ---> unique 또는 pk 를 설정하여 해결할 수 있다.
	2. 데이터의 중복이 않되있을때 ---> 테이블 분리로 해결. ( 정규화 : 매우 복잡한 이론이다. )
	3. Create : 삽입이상.
	4. Read : 
	5. Update : 갱신 이상현상.   ---> 원인 : 튜플을 유일하게 식별할수 없기때문.
	6. Delete : 삭제 이상현상.   ---> 튜플을 유일하게 식별할수 없기때문.
	7. id를 unique 하게 설정하면 갱신/ 삭제 이상현사을 막을 수 있다.		

8.외래키 ( ***** )
	1. 외래키는 기본키를 참조한다.
	2. 외래키는 테이블을 분리하고 기본키를 참조할때 찾을 수 있는 단서를 남기기위해 만들어졌다.
	3. 자식릴레이션 : 외래키
	4. 부모릴레이션 : 참조대상
	5. 자식릴레이션에 저장된 외래키가 부모 릴레이션의 특정 컬럼을 참조한다.
	6. 외래키를 만들기 전에, 부모릴레이션을 먼저 만들어야한다.
	7. 자식릴레이션의 외래키 컬럼은 unique 하지 않아도 된다.

====================================================================
문제 유형 정리 : 
예제 1 : 회사는 자동차를 등록한다 한사람이 여러대를 등록한다.

	테이블1
			이름	   전화번호	   카번호 
			홍길동   1111	      1
		 	홍길동   2222	      2

문제 : 이 테이블은 어떠한 문제점이 있는가?
문제1. 홍씨의 전화번호를 4444로 바꿀때, 어느 홍씨를 바꿀지 모른다.  --> 튜플을 유일하게 식별하지 못한다.
문제2. 홍씨를 삭제할때, 어느 홍씨를 삭제할 건지 명확치 않다. 	 --> 튜플을 유일하게 식별하지 못한다.

전문적인 표현 : 
1. update 혹은 delete 액션일 경우 로우를 유일하게 식별하지 못하는 문제가 발생한다.

해결 방법 :
id를 unique 하게 설정하면 갱신/삭제 이상 현상을 막을 수 있다.
	테이블2
			ID	이름	   전화번호	   카번호 
			a	홍길동   1111	      1
			b	홍길동   2222	      2

문제3. 아이디가 a인 홍씨가 보유한 여러대에 차량을 등록할때, 중복된 데이터가 발생한다. ( 데이터 중복 최소화. )
	테이블3
			ID	이름	   전화번호	   카번호 
			a	홍길동   1111	      1
			a	홍길동   1111	      2
			a	홍길동   1111	      3
			b	홍길동   2222	      1


전문적인 표현 :


해결 방법 :
테이블 분리.
        사원정보 테이블             차량정보 테이블
	ID 이름 전화변호          	 ID 	카번호
	PK				 FK
	
위 테이블간 참조관계의 올바른 표현 방법 :
===> 차량정보 테이블에 저장된 ID라는 컬럼이 사원정보 테이블의 ID라는 컬럼을 참조한다.
        	( 자식릴레이션에 저장된 외래키가 부모 릴레이션의 특정 컬럼을 참조한다. )
----------------------------------------------------------------------------------------------------------




===================================================================
코드 정리 : 

member table
id : 8글자, 기본키
name : 한글5글자.
tel : 13글자

car table
carnum : 4글자
id : 8글자, 외래키(참조하는 정보-member릴레이션의 id컬럼)

이렇게 테이블을 논리적설계까지 완료 하였습니다.
물리적 테이블을 만들기 위한 쿼리문을 조별로 완성해 보세요.
이때 메모장 등 손코딩으로 합니다.


1. 기본키 설정 방법 : 
1.1 테이블 생성 시에 추가 : 
	방법1: 
	create table member(
		id varchar2(8) ,
		name varchar2(30),
		tel varchr2(13),
		constraint pk_member primary key ( id )   ( 기본키명 있는걸 관장 )
	);
	방법2: 
	create table member(
		id varchar2(8) primary key,
		name varchar2(30),
		tel varchr2(13),		
	);

1.2 테이블 수정을 통한 추가:
	alter table 테이블명 add constraint (pk명) primary key ( 대상컬럼 );
	alter table member add primary key (id);


2. 기본키 변경 방법 :
	-- 변경할 pk 삭제
	alter table 테이블명 drop constraint 키본키명;
	alter table member drop constraint pk_member;
	-- pk 걸럼을 변경 후 재생성
	alter table member add constraint pk_member primary key ( id );
3. 기본키 제거 방법 :
	alter table member drop constraint pk_member;

4. 기본키 조회 방법 :
	...

---------------------------------------------------------------------------------------------------
1. 외래키 설정 방법 :
순서 : 
	1. 기본키를 가지고 있는 부모테이블 생성.
	2. 외래키 생성.

방법1 : 테이블 생성하면서 외래키 생성.
	create table car (
		carnum varchar2(4),
		id varchar2(8),   		-- 외래키로 지정할 컬럼.
		-- 외래키 설정문 
		constraint fk_member_id foreign key (id) references member (id)
		-- constraint fk명 foreign key (fk가 될 컬럼명) references ( 부모릴레이션 )  ( pk컬럼명 );
	); 
	// fk_member_id 는 기본키 이름을 지정해준다.
	// 표현방법1은 쿼리문은 오라클이 알아서 지정한다.
방법2: 테이블 생성 후에 외래키 생성.
	alter table car add constraint fk_member_id foreign key (id) references member (id);
	-- alter table ( fk를 생성할 테이블)
	-- add constraint (fk명) foreign key (fk로 지정할 컬럼명) references (pk가 위치하는 부모 릴레이션)(pk컬럼명);

3. 외래키 삭제하기.
 	alter table car drop constraint fk_member_id ;
	-- alter table ( 삭제할 fk가 위치한 테이블명 ) drop constraint ( 삭제할 fk명 );













